name: Build and Release

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

env:
  FLUTTER_VERSION: '3.35.2'
  JAVA_VERSION: '17'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter Pub
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: flutter-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-pub-

      - name: Get dependencies
        run: flutter pub get

      - name: Run Flutter analyzer
        run: flutter analyze --fatal-infos

      - name: Run tests
        run: flutter test --coverage || echo "Tests failed but continuing build"
        continue-on-error: true

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: coverage/lcov.info
          fail_ci_if_error: false

      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .

  check-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check backend status
        run: |
          echo "🔍 Checking backend endpoints..."
          check_endpoint() {
            local url="$1"
            local name="$2"
            local max_attempts=5
            local wait_time=15
            for i in $(seq 1 $max_attempts); do
              echo "⏳ Checking $name (attempt $i/$max_attempts)..."
              if curl -sSf --max-time 30 --retry 3 "$url" > /dev/null 2>&1; then
                echo "✅ $name endpoint working"
                return 0
              elif [ $i -eq $max_attempts ]; then
                echo "❌ $name endpoint failed after $max_attempts attempts"
                return 1
              else
                echo "⏸️ Waiting ${wait_time}s before retry..."
                sleep $wait_time
              fi
            done
          }
          check_endpoint "https://momentum-to2e.onrender.com/wake-up" "Wake-up"
          echo "⏳ Allowing backend time to fully initialize..."
          sleep 30
          check_endpoint "https://momentum-to2e.onrender.com/health" "Health"
          echo "📊 Backend status check completed successfully"

  build:
    needs: [code-quality, check-backend]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: android
            output: apk
          - os: ubuntu-latest
            platform: web
            output: web
          - os: windows-latest
            platform: windows
            output: exe
          - os: macos-latest
            platform: ios
            output: simulator
          - os: macos-latest
            platform: macos
            output: app

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter Pub
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: flutter-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-pub-

      - name: Cache Gradle
        if: matrix.platform == 'android'
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      - name: Platform Setup
        shell: bash
        run: |
          case "${{ matrix.platform }}" in
            android)
              yes | flutter doctor --android-licenses || true
              ;;
            web)
              flutter config --enable-web
              ;;
            windows)
              flutter config --enable-windows-desktop
              ;;
            ios)
              flutter config --enable-ios
              ;;
            macos)
              flutter config --enable-macos-desktop
              ;;
          esac

      - name: Setup iOS Simulator
        if: matrix.platform == 'ios'
        run: |
          echo "📱 Setting up iOS Simulator with default runner..."
          
          # List available simulators
          echo "Available simulators:"
          xcrun simctl list devices available
          
          # Use default iPhone simulator (let Xcode/Flutter choose)
          echo "🚀 Using default iOS simulator configuration"
          
          # Optional: Boot a specific simulator if needed
          # Get the first available iPhone simulator
          DEVICE_ID=$(xcrun simctl list devices available | grep iPhone | head -1 | sed -E 's/.*\(([0-9A-F-]+)\).*/\1/' | tr -d ' ')
          
          if [ -n "$DEVICE_ID" ]; then
            echo "Found simulator: $DEVICE_ID"
            echo "IOS_SIMULATOR_ID=$DEVICE_ID" >> $GITHUB_ENV
            
            # Boot the simulator
            echo "🚀 Booting simulator..."
            xcrun simctl boot "$DEVICE_ID" || echo "Simulator may already be booted"
            
            echo "⏳ Waiting for simulator to be ready..."
            sleep 30
          else
            echo "No specific simulator ID found, using Flutter's default"
          fi

      - name: Get dependencies
        run: flutter pub get

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Build Application
        shell: bash
        run: |
          case "${{ matrix.platform }}" in
            android)
              flutter build apk --release --split-per-abi
              flutter build appbundle --release
              ;;
            web)
              flutter build web --release
              ;;
            windows)
              flutter build windows --release
              ;;
            ios)
              # Use Flutter's default simulator selection
              if [ -n "$IOS_SIMULATOR_ID" ]; then
                echo "Building for specific simulator: $IOS_SIMULATOR_ID"
                flutter build ios --simulator --no-codesign --device-id="$IOS_SIMULATOR_ID"
              else
                echo "Building for default iOS simulator"
                flutter build ios --simulator --no-codesign
              fi
              ;;
            macos)
              flutter build macos --release
              ;;
          esac

      - name: Install zip (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Package Build
        shell: bash
        run: |
          mkdir -p releases
          case "${{ matrix.platform }}" in
            android)
              cp build/app/outputs/flutter-apk/*.apk releases/
              cp build/app/outputs/bundle/release/*.aab releases/
              ;;
            web)
              cd build/web && zip -r "../../releases/momentum-web-${{ github.sha }}.zip" .
              ;;
            windows)
              pwsh -Command "Compress-Archive -Path 'build/windows/x64/runner/Release/*' -DestinationPath 'releases/momentum-windows-${{ github.sha }}.zip'"
              ;;
            ios)
              if [ -d "build/ios/iphonesimulator" ] && [ "$(ls -A build/ios/iphonesimulator 2>/dev/null)" ]; then
                cd build/ios/iphonesimulator
                zip -r "../../../releases/momentum-ios-simulator-${{ github.sha }}.zip" .
              else
                echo "iOS build directory not found" > "releases/momentum-ios-simulator-${{ github.sha }}.txt"
              fi
              ;;
            macos)
              if [ -d "build/macos/Build/Products/Release" ] && [ "$(ls -A build/macos/Build/Products/Release 2>/dev/null)" ]; then
                cd build/macos/Build/Products/Release
                zip -r "../../../../../releases/momentum-macos-${{ github.sha }}.zip" .
              else
                echo "macOS build directory not found" > "releases/momentum-macos-${{ github.sha }}.txt"
              fi
              ;;
          esac

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: momentum-${{ matrix.platform }}-${{ github.sha }}
          path: releases/
          retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Prepare Release Files
        run: |
          mkdir -p release-files
          find artifacts/ -name "*.apk" -exec cp {} release-files/ \;
          find artifacts/ -name "*.aab" -exec cp {} release-files/ \;
          find artifacts/ -name "*.zip" -exec cp {} release-files/ \;
          find artifacts/ -name "*.txt" -exec cp {} release-files/ \;
          ls -la release-files/
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Momentum Release ${{ github.ref_name }}
            ### 📱 Downloads
            - **Android APK**
            - **Android AAB**
            - **Windows**
            - **Web**
            - **iOS Simulator**
            - **macOS**
          draft: false
          prerelease: contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha')
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-web:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Web Artifacts
        uses: actions/download-artifact@v4
        with:
          name: momentum-web-${{ github.sha }}
          path: web-build/

  notify:
    if: always()
    needs: [code-quality, check-backend, build, release]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Build Status
        run: |
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ Build completed successfully"
          else
            echo "❌ Build failed"
            exit 1
          fi